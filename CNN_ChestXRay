{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8449721,"sourceType":"datasetVersion","datasetId":5035373}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\n\nimport os\nimport tensorflow as tf\nimport keras\nfrom tensorflow.keras import layers\nfrom keras.layers import Conv2D, Flatten, BatchNormalization, Dense, MaxPooling2D,Dropout\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\nfrom keras.models import Sequential\nfrom tensorflow.keras import regularizers\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_curve, auc\nfrom tensorflow.keras import callbacks\nimport glob\nmain_path = \"/kaggle/input/chest-xray/chest_xray\"\n\nIMG_SIZE = 224\nBATCH = 32\nSEED = 42\ntrain_path = os.path.join(main_path,\"train\")\ntest_path=os.path.join(main_path,\"test\")\n\ntrain_normal = glob.glob(train_path+\"/NORMAL/*.jpeg\")\ntrain_pneumonia = glob.glob(train_path+\"/PNEUMONIA/*.jpeg\")\n\ntest_normal = glob.glob(test_path+\"/NORMAL/*.jpeg\")\ntest_pneumonia = glob.glob(test_path+\"/PNEUMONIA/*.jpeg\")\ntrain_list = [x for x in train_normal]\ntrain_list.extend([x for x in train_pneumonia])\n\ndf_train = pd.DataFrame(np.concatenate([['Normal']*len(train_normal) , ['Pneumonia']*len(train_pneumonia)]), columns = ['class'])\ndf_train['image'] = [x for x in train_list]\n\ntest_list = [x for x in test_normal]\ntest_list.extend([x for x in test_pneumonia])\n\ndf_test = pd.DataFrame(np.concatenate([['Normal']*len(test_normal) , ['Pneumonia']*len(test_pneumonia)]), columns = ['class'])\ndf_test['image'] = [x for x in test_list]\ntrain_df, val_df = train_test_split(df_train, test_size = 0.20, random_state = SEED, stratify = df_train['class'])\n\ntrain_df['class'] = train_df['class'].astype(str)\nval_df['class'] = val_df['class'].astype(str)\n\n\ntrain_datagen = ImageDataGenerator(rescale=1/255.,\n                                   zoom_range=0.1,\n                                   rotation_range=0.1,\n                                   width_shift_range=0.1,\n                                   height_shift_range=0.1)\n\nval_datagen = ImageDataGenerator(rescale=1/255.)\n\nds_train = train_datagen.flow_from_dataframe(train_df,\n                                              x_col='image',\n                                              y_col='class',\n                                              target_size=(IMG_SIZE, IMG_SIZE),\n                                              class_mode='binary',  '\n                                              batch_size=BATCH,\n                                              seed=SEED)\n\nds_val = val_datagen.flow_from_dataframe(val_df,\n                                          x_col='image',\n                                          y_col='class',\n                                          target_size=(IMG_SIZE, IMG_SIZE),\n                                          class_mode='binary',\n                                          batch_size=BATCH,\n                                          seed=SEED)\n\nearly_stopping = callbacks.EarlyStopping(\n    monitor='val_loss',\n    patience=5,\n    min_delta=1e-7,\n    restore_best_weights=True,\n)\n\nplateau = callbacks.ReduceLROnPlateau(\n    monitor='val_loss',\n    factor = 0.2,\n    patience = 2,\n    min_delt = 1e-7,\n    cooldown = 0,\n    verbose = 1\n)\n\nmodel = tf.keras.models.Sequential()\nmodel.add(layers.Input(shape = (224,224,3)))\nmodel.add(layers.Conv2D(224, (3, 3), activation='relu'))\nmodel.add(layers.AveragePooling2D((2,2)))\nmodel.add(layers.Conv2D(448,(3,3), activation = 'relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(448,(3,3), activation = 'relu'))\nmodel.add(layers.AveragePooling2D((2,2)))\nmodel.add(layers.Conv2D(448,(3,3), activation = 'relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(448,(3,3), activation = 'relu'))\nmodel.add(layers.AveragePooling2D((2,2)))\nmodel.add(layers.Conv2D(448,(3,3), activation = 'relu'))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(units = 448, activation = 'relu'))\nmodel.add(layers.Dense(units = 224, activation = 'relu'))\nmodel.add(layers.Dense(units = 78, activation = 'relu'))\nmodel.add(layers.Dense(units = 26, activation = 'relu'))\nmodel.add(layers.Dense(units = 1, activation = 'sigmoid'))\nmodel.summary()\nmodel.compile(loss = tf.keras.losses.BinaryCrossentropy(), optimizer = tf.keras.optimizers.Adam(learning_rate = 3e-5))\nmodel.build()\n\nmodel.fit(ds_train,\n          epochs=50,\n          validation_data=ds_val,\n          callbacks=[early_stopping, plateau],\n          steps_per_epoch=len(train_df) // BATCH,\n          validation_steps=len(val_df) // BATCH)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]}]}